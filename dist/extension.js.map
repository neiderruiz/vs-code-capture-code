{"version":3,"file":"extension.js","mappings":"swBAAA,kBACMA,EAAO,EAAQ,IACfC,EAAK,EAAQ,KAEnB,oBAAyBC,GAEvB,IAAIC,EAAaC,EAAOC,SAASC,gBAC/B,4BACA,KACE,IAAIC,EAASH,EAAOI,OAAOC,iBAC3B,GAAIF,EAAQ,CACV,IAAIG,EAAYH,EAAOG,UACnBC,EAAOJ,EAAOK,SAASC,QAAQH,GAEzC,MAAMI,EAAQV,EAAOI,OAAOO,mBACpB,cACA,gBACAX,EAAOY,WAAWC,IAClB,CACEC,eAAe,IAIzBd,EAAOI,OAAOW,gCAAgCC,IAC7C,GAAIA,EAAMC,aAAed,EAAQ,CAC/B,IAAIe,EAAUF,EAAMC,WAAWT,SAASC,QAAQO,EAAMG,WAAW,IACjET,EAAMU,QAAQC,YAAY,CAAEC,QAAS,cAAef,KAAMW,G,KAKvD,MAAMK,EAAmBvB,EAAOwB,IAAIC,KAClC7B,EAAK8B,KAAK5B,EAAQ6B,cAAe,MAAO,cAEpCC,EAAYlB,EAAMU,QAAQS,aAAaN,GAEvCO,EAAgB9B,EAAOwB,IAAIC,KAC/B7B,EAAK8B,KACH5B,EAAQ6B,cACR,eACA,yBACA,OACA,6BAIEI,EAAgBrB,EAAMU,QAAQS,aAAaC,GAE3CE,EAAqBhC,EAAOwB,IAAIC,KACpC7B,EAAK8B,KACH5B,EAAQ6B,cACR,eACA,UACA,aAIEM,EAAmBvB,EAAMU,QAAQS,aAAaG,GAE9CE,EAAoBlC,EAAOwB,IAAIC,KACnC7B,EAAK8B,KACH5B,EAAQ6B,cACR,eACA,UACA,SACA,uBAIEQ,EAAkBzB,EAAMU,QAAQS,aAAaK,GAE7CE,EAAcpC,EAAOwB,IAAIC,KAC7B7B,EAAK8B,KAAK5B,EAAQ6B,cAAe,MAAO,cAGpCU,EAAa3B,EAAMU,QAAQS,aAAaO,GAGxCE,EAAW1C,EAAK8B,KAAK5B,EAAQ6B,cAAe,MAAO,cAIzD,IAAIY,EAFa1C,EAAG2C,aAAaF,EAAU,SAG3CC,EAAcA,EAAYE,QACxB,qBACAN,GAEFI,EAAcA,EAAYE,QAAQ,gBAAiBJ,GACnDE,EAAcA,EAAYE,QAAQ,mBAAoBV,GACtDQ,EAAcA,EAAYE,QACxB,sBACAR,GAGFM,EAAcA,EAAYE,QAAQ,eAAgBb,GAElDlB,EAAMU,QAAQsB,KAAOH,EAErB7B,EAAMU,QAAQC,YAAY,CAAEC,QAAS,cAAef,KAAMA,G,KAOhET,EAAQ6C,cAAcC,KAAK7C,EAC7B,EAEA,wBAA8B,C,UC5G9B8C,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://capture-code/./src/extension.ts","webpack://capture-code/external commonjs \"vscode\"","webpack://capture-code/external node-commonjs \"fs\"","webpack://capture-code/external node-commonjs \"path\"","webpack://capture-code/webpack/bootstrap","webpack://capture-code/webpack/startup"],"sourcesContent":["import * as vscode from \"vscode\";\nconst path = require(\"path\");\nconst fs = require(\"fs\");\n\nexport function activate(context: vscode.ExtensionContext) {\n\n  let disposable = vscode.commands.registerCommand(\n    \"capture-code.captureText\",\n    () => {\n      let editor = vscode.window.activeTextEditor;\n      if (editor) {\n        let selection = editor.selection;\n        let text = editor.document.getText(selection);\n\n\t\tconst panel = vscode.window.createWebviewPanel(\n          \"textToImage\",\n          \"Text to Image\", \n          vscode.ViewColumn.Two,\n          {\n            enableScripts: true,\n          }\n        );\n\n\t\tvscode.window.onDidChangeTextEditorSelection((event) => {\n\t\t\tif (event.textEditor === editor) { \n\t\t\t  let newText = event.textEditor.document.getText(event.selections[0]);\n\t\t\t  panel.webview.postMessage({ command: \"createImage\", text: newText });\n\t\t\t}\n\t\t  });\n\t\t  \n\n        const scriptPathOnDisk = vscode.Uri.file(\n          path.join(context.extensionPath, \"src\", \"script.js\")\n        );\n        const scriptUri = panel.webview.asWebviewUri(scriptPathOnDisk);\n\n        const domtoImageUrl = vscode.Uri.file(\n          path.join(\n            context.extensionPath,\n            \"node_modules\",\n            \"dom-to-image-even-more\",\n            \"dist\",\n            \"dom-to-image-more.min.js\"\n          )\n        );\n\n        const domtoImageUri = panel.webview.asWebviewUri(domtoImageUrl);\n\n        const scriptPathcPrismjs = vscode.Uri.file(\n          path.join(\n            context.extensionPath,\n            \"node_modules\",\n            \"prismjs\",\n            \"prism.js\"\n          )\n        );\n\n        const scriptUriPrismjs = panel.webview.asWebviewUri(scriptPathcPrismjs);\n\n        const stylePathcPrismjs = vscode.Uri.file(\n          path.join(\n            context.extensionPath,\n            \"node_modules\",\n            \"prismjs\",\n            \"themes\",\n            \"prism-tomorrow.css\"\n          )\n        );\n\n        const styleUriPrismjs = panel.webview.asWebviewUri(stylePathcPrismjs);\n\n        const myStylePath = vscode.Uri.file(\n          path.join(context.extensionPath, \"src\", \"style.css\")\n        );\n\n        const myStyleUri = panel.webview.asWebviewUri(myStylePath);\n\n\n        const filePath = path.join(context.extensionPath, \"src\", \"index.html\");\n\n        const htmlFile = fs.readFileSync(filePath, \"utf-8\");\n\n        let updatedHtml = htmlFile;\n        updatedHtml = updatedHtml.replace(\n          \"${styleUriPrismjs}\",\n          styleUriPrismjs\n        );\n        updatedHtml = updatedHtml.replace(\"${myStyleUri}\", myStyleUri);\n        updatedHtml = updatedHtml.replace(\"${domtoImageUri}\", domtoImageUri);\n        updatedHtml = updatedHtml.replace(\n          \"${scriptUriPrismjs}\",\n          scriptUriPrismjs\n        );\n\n        updatedHtml = updatedHtml.replace(\"${scriptUri}\", scriptUri);\n\n        panel.webview.html = updatedHtml;\n\n        panel.webview.postMessage({ command: \"createImage\", text: text });\n\n\n      }\n    }\n  );\n\n  context.subscriptions.push(disposable);\n}\n\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(112);\n"],"names":["path","fs","context","disposable","vscode","commands","registerCommand","editor","window","activeTextEditor","selection","text","document","getText","panel","createWebviewPanel","ViewColumn","Two","enableScripts","onDidChangeTextEditorSelection","event","textEditor","newText","selections","webview","postMessage","command","scriptPathOnDisk","Uri","file","join","extensionPath","scriptUri","asWebviewUri","domtoImageUrl","domtoImageUri","scriptPathcPrismjs","scriptUriPrismjs","stylePathcPrismjs","styleUriPrismjs","myStylePath","myStyleUri","filePath","updatedHtml","readFileSync","replace","html","subscriptions","push","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}